import UIKit
import Foundation
/*
 Для чтения входных данных необходимо получить их
 из стандартного потока ввода (stdin).
 Данные во входном потоке соответствуют описанному
 в условии формату. Обычно входные данные состоят
 из нескольких строк.
 
 Можно использовать несколько методов:
 * readLine() -- читает одну строку из потока;
 * readLine(strippingNewline: Bool) -- читает одну строку без символа переноса строки из потока;
 * readLine()?.split(separator: " ") -- читает одну строку и делит ее на слова, используя заданный разделитель.
 
 Чтобы прочитать из строки стандартного потока:
 * число -- let var = Int(readLine()!)!;
 * строку -- let svar = readLine()!;
 * массив чисел известной длины --
 let arr = readLine()!.split(separator: " ").map{ Int($0)! };
 * последовательность слов до конца файла --
 var sarr = [String]();
 while let line = readLine() {
 let words = line.split(separator: " ")
 sarr += words.map { String($0) }
 }
 
 Чтобы вывести результат в стандартный поток вывода (stdout),
 можно использовать функцию print().
 
 Возможное решение задачи "Вычислите сумму A+B":
 let line = readLine()!
 let numbers = line.split(separator: " ")
 print(Int(numbers[0])! + Int(numbers[1])!)
 */

// MARK: - Функция которую не принял 
func falseMakeField(_ fieldParameters: [String], _ sarr: [[Int]]) -> [[String]] {
    func makeField(x: Int, y: Int) -> [Int:[String]] {
        var dict: [Int:[String]] = [:]
        for i in 0...x-1 {
            var str: [String] = []
            for j in 0...y-1 {
                str.append("0")
                dict[i] = str
            }
        }
        return dict
    }
    
    func putBombs2(_ field: inout [Int:[String]], _ x: Int, _ y: Int){
        let x = x-1
        let y = y-1
        if field[x]![y] != "*" {
            field[x]![y] = "*"
            for i in x-1...x+1 {
                if let row = field[i] {
                    let indexColomn = row.count
                    for j in y-1...y+1 {
                        if j < indexColomn, j >= 0 {
                            if field[i]![j] != "*" {
                                var number = field[i]![j]
                                field[i]![j] = String(Int(number)!+1)
                                
                            }
                        }
                    }
                }
            }
        }
    }
    
    
    
    
    let x:Int = Int(fieldParameters[0])!
    let y:Int = Int(fieldParameters[1])!
    
    var field = makeField(x: x, y: y)
    
    if fieldParameters[2] != "0" {
        for i in 0...sarr.count-1 {
            let xStr = sarr[i]
            let x:Int = Int(String(xStr[0]))!
            let y:Int = Int(String(xStr[1]))!
            
            putBombs2(&field, x, y)
        }
    }
    var ans: [[String]] = []
    for keys in field.keys.sorted() {
        ans.append(field[keys]!)
    }
    for i in 0...ans.count-1 {
        print(ans[i].joined(separator: " "))
    }
    
    return ans
}

func makeField(n: Int, m: Int, mines: [[Int]]) -> [[String]] {
    let dx = [-1, -1, -1, 0, 0, 1, 1, 1]
    let dy = [-1, 0, 1, -1, 1, -1, 0, 1]
    
    var field = [[String]](repeating: [String](repeating: "0", count: m+2), count: n+2)

    for mine in mines {
        let minei = mine[0]
        let minej = mine[1]

        for k in 0..<dx.count {
            let i = minei + dx[k]
            let j = minej + dy[k]

            if i >= 0 && i <= n + 1 && j >= 0 && j <= m + 1 {
                if field[i][j] != "*" { // Проверяем, не является ли ячейка миной
                    field[i][j] = "\(Int(field[i][j])! + 1)"
                }
            }
        }

        field[minei][minej] = "*" // Установка мины
    }
    var answer: [[String]] = []
    for i in 1...field.count-2 {
        answer.append(field[i].dropFirst().dropLast())
//        print(field[i].dropFirst().dropLast().joined(separator: " "))
    }
    print("       ")
    print("       ")
    print("  правильная матрица   ")
    for i in 0...answer.count-1 {
        print(answer[i].joined(separator: " "))
    }
    return answer
}

var sarr: [[Int]] = [[22, 3], [25, 23], [2, 23], [24, 5], [27, 8], [16, 7], [26, 20], [27, 16], [12, 19], [27, 16], [15, 15], [26, 1], [11, 9], [20, 21], [25, 10], [5, 19], [12, 26], [25, 24], [25, 20], [20, 14], [13, 25], [26, 14], [12, 7], [18, 4], [22, 17], [26, 12], [13, 23], [2, 25], [27, 17], [22, 5], [8, 12], [20, 9], [23, 19], [27, 1], [18, 7], [16, 20], [3, 11], [1, 17], [16, 19], [10, 9], [19, 11], [3, 7], [22, 19], [8, 10], [26, 2], [14, 6], [12, 22], [23, 1], [18, 25], [11, 22], [10, 19], [7, 4], [9, 2], [14, 2], [14, 20], [2, 9], [21, 12], [25, 21], [1, 20], [8, 12], [26, 5], [7, 7], [14, 10], [12, 16], [1, 26], [4, 11], [2, 24], [27, 6], [4, 4], [21, 21], [14, 2], [27, 7], [27, 18], [19, 4], [2, 1], [19, 8], [19, 8], [10, 3], [10, 21], [6, 19], [4, 13], [15, 1], [7, 22], [7, 16], [27, 4], [2, 8], [20, 26], [6, 22], [4, 6], [20, 5], [14, 17], [27, 4], [18, 14], [12, 7], [14, 14], [9, 26], [4, 22], [7, 7], [13, 7], [1, 21], [18, 25], [21, 16], [17, 14], [1, 19], [10, 6], [14, 25], [24, 21], [25, 9], [20, 9], [5, 20], [26, 26], [21, 7], [3, 21], [20, 15], [8, 22], [20, 7], [14, 12], [6, 24], [6, 16], [15, 22], [7, 4], [4, 26], [1, 22], [2, 13], [4, 20], [13, 14], [8, 22], [1, 3], [15, 14], [25, 19], [22, 7], [19, 15], [26, 13], [7, 6], [15, 19], [22, 11], [17, 4], [6, 4], [9, 26], [7, 12], [10, 23], [23, 5], [8, 11], [22, 11], [26, 2], [14, 6], [17, 1], [14, 11], [8, 11], [6, 25], [12, 10], [21, 3], [16, 3], [6, 11], [20, 4], [3, 15], [1, 26], [1, 4], [5, 7], [21, 3], [27, 4], [17, 11], [8, 18], [24, 15], [19, 15], [9, 12], [7, 17], [8, 22], [25, 14], [19, 16], [13, 12], [14, 2], [10, 20], [16, 6], [15, 5], [1, 8], [18, 5], [16, 17], [13, 18], [17, 10], [12, 23], [18, 14], [21, 5], [24, 14], [9, 10], [22, 15], [19, 7], [27, 9], [5, 22], [9, 7], [23, 22], [1, 14], [14, 11], [17, 19], [25, 1], [23, 6], [7, 6], [17, 20], [14, 26], [23, 5], [11, 14], [13, 24], [21, 7], [10, 10], [25, 19], [11, 19], [3, 2], [20, 22], [13, 8], [18, 11], [4, 16], [11, 1], [20, 5], [16, 5], [15, 8], [8, 3], [14, 15], [27, 1], [25, 20], [12, 13], [21, 12], [25, 18], [12, 9], [16, 4], [12, 3], [8, 6], [20, 7], [20, 9], [14, 5], [23, 18], [22, 6], [6, 3], [4, 16], [9, 17], [5, 11], [25, 2], [21, 12], [13, 25], [10, 5], [27, 16], [24, 6], [27, 26], [16, 10], [4, 18], [8, 20], [17, 25], [21, 8], [17, 26], [7, 26], [14, 21], [15, 26], [24, 23], [8, 5], [16, 21], [12, 6], [21, 11], [15, 26], [3, 19], [14, 14], [18, 19], [21, 19], [17, 5], [20, 8], [24, 15], [13, 4], [6, 25], [22, 2], [16, 23], [18, 26], [3, 8], [16, 11], [7, 6], [13, 3], [16, 1], [7, 2], [8, 7], [2, 1], [18, 7], [6, 18], [19, 24], [26, 16], [10, 9], [12, 3], [20, 3], [3, 23], [10, 8], [26, 7], [27, 16], [9, 25], [26, 22], [11, 21], [8, 6], [25, 11], [11, 25], [20, 17], [18, 26], [13, 18], [6, 16], [15, 4], [20, 4], [20, 18], [22, 15], [22, 2], [2, 6], [2, 9], [19, 16], [5, 14], [3, 26], [3, 5], [21, 4], [27, 13], [18, 16], [8, 9], [9, 10], [5, 6], [5, 4], [20, 20], [7, 22], [12, 24], [14, 20], [11, 14], [13, 16], [21, 9], [11, 21], [26, 17], [13, 26], [6, 18], [9, 19], [11, 18], [21, 19], [11, 16], [20, 20], [21, 19], [11, 13], [24, 3], [13, 14], [22, 11], [3, 23], [26, 7], [10, 9], [1, 21], [22, 10], [12, 6], [7, 13], [2, 4], [10, 20], [13, 25], [7, 17], [4, 23], [3, 10], [2, 13], [23, 4], [27, 23], [1, 9], [21, 16], [20, 24], [18, 12], [6, 13], [13, 19], [16, 1], [23, 13], [12, 4], [24, 23], [27, 22], [27, 17], [9, 24], [9, 2], [15, 21], [11, 12], [7, 7], [27, 13], [9, 20], [22, 17], [8, 24], [1, 21], [7, 6], [22, 11], [19, 7], [13, 14], [21, 24], [15, 12], [15, 21], [18, 12], [7, 24], [17, 20], [22, 24], [21, 17], [22, 4], [8, 6], [20, 23], [23, 6], [24, 17], [3, 3], [14, 10], [8, 14], [7, 5], [7, 12], [8, 24], [16, 14], [15, 13], [25, 5], [20, 17], [16, 3], [24, 8], [26, 20], [22, 8], [12, 22], [12, 10], [19, 13], [14, 16], [21, 6], [10, 13], [21, 11], [25, 8], [23, 7], [5, 1], [14, 7], [21, 1], [27, 4], [1, 20], [23, 1], [7, 19], [23, 8], [6, 5], [3, 7], [2, 26], [22, 18], [5, 5], [14, 18], [25, 6], [6, 23], [12, 12], [19, 22], [12, 6], [14, 26], [24, 25], [5, 2], [18, 16], [14, 1], [26, 19], [23, 19], [6, 15], [5, 8], [5, 8], [17, 16], [23, 6], [20, 20], [15, 7], [4, 1], [3, 16], [23, 4], [25, 6], [26, 24], [3, 11], [1, 11], [9, 8], [8, 2], [12, 15], [7, 13], [24, 25], [4, 15], [20, 6], [10, 2], [27, 21], [17, 19], [9, 12], [7, 4], [24, 20], [14, 17], [10, 4], [10, 16], [13, 6], [12, 7], [9, 22], [22, 8], [8, 14], [1, 23], [7, 17], [19, 15], [20, 18], [15, 7], [3, 6], [5, 10], [19, 18], [26, 21], [11, 13], [4, 13], [18, 2], [19, 24], [13, 15], [8, 6], [26, 16], [1, 11], [21, 7], [22, 2], [2, 1], [10, 13], [3, 14], [6, 26], [19, 4], [25, 22], [7, 9], [9, 21], [4, 7], [12, 17], [13, 3], [11, 8], [15, 20], [26, 3], [24, 5], [9, 22], [1, 8], [2, 6], [23, 16], [6, 5], [22, 13], [17, 3], [23, 7], [12, 12], [21, 17], [27, 14], [13, 2], [5, 4], [19, 10], [14, 6], [24, 26], [2, 20], [9, 11], [10, 24], [16, 7], [14, 3], [14, 4], [22, 23], [8, 8], [3, 18], [11, 11], [5, 4], [18, 6], [21, 18], [23, 10], [9, 11], [25, 25], [4, 7], [24, 21], [4, 13], [13, 25], [22, 22], [2, 10], [22, 10], [17, 12], [4, 12], [19, 2], [13, 1], [2, 21], [17, 20], [19, 8], [15, 1], [6, 21], [16, 9], [12, 2], [1, 22], [27, 19], [16, 3], [5, 5], [25, 19], [26, 19], [24, 7], [9, 16], [6, 17], [27, 9], [4, 14], [13, 23], [8, 14], [8, 21], [5, 12], [7, 23], [27, 16], [27, 6], [5, 2], [19, 25], [26, 17], [22, 2], [18, 23], [11, 22], [4, 6], [13, 23], [13, 11], [19, 23], [14, 7], [19, 18], [6, 14], [3, 10], [27, 24], [14, 10], [14, 2], [2, 15], [6, 25], [24, 15], [22, 19], [21, 18], [21, 14], [20, 23], [10, 19], [12, 19], [18, 11], [11, 2], [24, 2], [17, 14], [2, 3], [20, 17], [11, 26], [26, 17], [20, 15], [15, 10], [27, 19], [8, 7], [15, 19], [27, 8], [15, 8], [2, 20], [3, 11], [20, 24], [9, 6], [4, 12], [12, 23], [26, 16], [23, 15], [4, 22], [27, 19], [19, 2], [23, 26], [12, 20], [26, 18], [11, 11], [10, 2], [13, 10], [19, 15], [15, 7], [2, 8], [13, 10], [5, 18], [3, 14], [23, 21], [9, 17], [7, 24], [14, 20], [24, 17], [3, 14], [11, 11], [24, 15], [17, 4], [5, 6], [15, 15], [22, 4], [13, 11], [2, 5], [1, 19], [16, 25], [20, 26], [13, 4], [14, 17], [4, 19], [21, 14], [19, 25], [4, 11], [12, 1], [2, 11], [2, 23], [25, 16], [11, 17], [24, 18], [27, 23], [1, 23], [14, 21]]
    let x = 27
    let y = 26
    let minesCount = 674
    let fieldParameters = ["\(x)","\(y)","\(minesCount)"]

falseMakeField(fieldParameters, sarr)
makeField(n: Int(fieldParameters[0])!, m: Int(fieldParameters[1])!, mines: sarr)


//while true {
//    var sarr: [[Int]] = []
//    let x = Int.random(in: 1...100)
//    let y = Int.random(in: 1...100)
//    let minesCount = Int.random(in: 0...x * y)
//    let fieldParameters = ["\(x)","\(y)","\(minesCount)"]
//    
//    for _ in 1...minesCount {
//        sarr.append([Int.random(in: 1...x),Int.random(in: 1...y)])
//    }
//    
//    let trueField = makeField(n: Int(fieldParameters[0])!, m: Int(fieldParameters[1])!, mines: sarr)
//    let falseField = falseMakeField(fieldParameters, sarr)
//    
//    if trueField != falseField {
//        print(sarr)
//        print(fieldParameters)
//    }
//    
//}



































